services:
  postgres:
    networks:
      - example.com
    hostname: postgres.example.com
    ports:
      - 5432:5432
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: iceberg
      POSTGRES_PASSWORD: iceberg
      POSTGRES_DB: iceberg

  rest:
    networks:
      - example.com
    image: iceberg-rest-adapter:0.0.1
    ports:
      - 8181:8181
    volumes:
      - ./hdfs/hadoop-conf:/opt/hadoop
      - ./hdfs/hadoop_security_files/:/opt/hadoop_security_files
      - ./hdfs/kerberos/kdc/krb5.conf:/etc/krb5.conf
    environment:
      - CATALOG_CATALOG__IMPL=org.apache.iceberg.jdbc.JdbcCatalog
      - CATALOG_JDBC_USER=iceberg
      - CATALOG_JDBC_PASSWORD=iceberg
      - CATALOG_IO_IMPL=org.apache.iceberg.hadoop.HadoopFileIO
      - CATALOG_WAREHOUSE=hdfs://namenode:8020/iceberg_warehouse
      - HADOOP_CONF_DIR=/opt/hadoop
      - KRB5_CONFIG=/etc/krb5.conf
      - KRB5CCNAME=/opt/hadoop_security_files/krb5cc_0
    depends_on:
      - postgres
      - namenode
      - kinit_sidecar
    container_name: rest_catalog
    hostname: rest_catalog.example.com
  
  # Kerberos
  kdc:
    image: beargiles/kdc-sandbox
    container_name: kdc
    hostname: example.com
    volumes:
      - ./hdfs/kerberos/kdc/krb5.conf:/etc/kdc/krb5.conf
      - ./hdfs/kerberos/setup_kdc.sh:/opt/setup_kdc.sh
      - ./hdfs/hadoop_security_files/:/opt/hadoop_security_files
    entrypoint: /opt/setup_kdc.sh
    networks:
      - example.com      

  kinit_sidecar:
    image: beargiles/kdc-sandbox
    container_name: kinit_sidecar
    environment:
      - KRB5CCNAME=/opt/hadoop_security_files/krb5cc_0
      - KRB5_CONFIG=/etc/krb5.conf
    volumes: 
      - ./hdfs/hadoop_security_files/:/opt/hadoop_security_files
      - ./hdfs/kerberos/kdc/krb5.conf:/etc/krb5.conf
    command: >
      bash -c '
        while true; do
          kinit -kt /opt/hadoop_security_files/hdfs.keytab hdfs/rest_catalog.example.com@EXAMPLE.COM
          sleep 21600
        done
      '
    depends_on:
      - kdc
    networks:
      - example.com

  # HDFS
  namenode:
    image: apache/hadoop:3
    hostname: namenode.example.com
    container_name: namenode
    user: root
    ports:
      - 9870:9870
    depends_on:
      - kdc
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
      KRB5_CONFIG: /etc/krb5.conf
      HADOOP_OPTS: "-Djava.security.krb5.conf=/etc/krb5.conf"
    volumes:
      - ./hdfs/hadoop-conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./hdfs/hadoop-conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./hdfs/hadoop-conf/ssl-server.xml:/etc/hadoop/ssl-server.xml
      - ./hdfs/hadoop_security_files:/opt/hadoop_security_files
      - ./hdfs/kerberos/kdc/krb5.conf:/etc/krb5.conf
    command: >
      bash -c 'rm -rf /opt/hadoop_security_files/hdfs.jks && keytool -genkey -alias namenode.example.com \
        -keyalg rsa -keysize 1024 -dname "CN=namenode.example.com" -keypass changeme -keystore /opt/hadoop_security_files/hdfs.jks -storepass changeme \
        && hdfs namenode -format -force && hdfs namenode'
    networks:
      - example.com

  dn001:
    image: apache/hadoop:3
    container_name: dn001
    hostname: dn001.example.com
    user: root
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
      KRB5_CONFIG: /etc/krb5.conf
      HADOOP_OPTS: "-Djava.security.krb5.conf=/etc/krb5.conf"
    depends_on:
      - namenode
    volumes:
      - ./hdfs/hadoop-conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./hdfs/hadoop-conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./hdfs/hadoop-conf/ssl-server.xml:/etc/hadoop/ssl-server.xml
      - ./hdfs/hadoop_security_files:/opt/hadoop_security_files
      - ./hdfs/kerberos/kdc/krb5.conf:/etc/krb5.conf
    command: >
      bash -c 'keytool -genkey -alias dn001.example.com \
        -keyalg rsa -keysize 1024 -dname "CN=dn001.example.com" -keypass changeme -keystore /opt/hadoop_security_files/hdfs.jks -storepass changeme \
        && hdfs datanode'
    networks:
      - example.com

networks:
  example.com:
    external: true
    name: example.com


# && kinit -kt /opt/hadoop_security_files/hdfs.keytab hdfs/dn001.example.com && hdfs dfs -mkdir /iceberg_warehouse